[{"C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\App.tsx":"1","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\Stepper\\index.tsx":"2","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\index.tsx":"3","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Account.tsx":"4","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Personal.tsx":"5","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Review.tsx":"6"},{"size":116,"mtime":1638526975233,"results":"7","hashOfConfig":"8"},{"size":1740,"mtime":1638551580780,"results":"9","hashOfConfig":"8"},{"size":219,"mtime":1638526204412,"results":"10","hashOfConfig":"8"},{"size":5317,"mtime":1638552001704,"results":"11","hashOfConfig":"8"},{"size":3748,"mtime":1638529047962,"results":"12","hashOfConfig":"8"},{"size":2311,"mtime":1638551867174,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yxtgsk",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\App.tsx",[],"C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\Stepper\\index.tsx",[],"C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\index.tsx",[],["29","30"],"C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Account.tsx",["31"],"import React, { FC } from \"react\";\nimport { Field, Form, useField, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  CheckboxProps,\n  FormControlLabel,\n  Checkbox,\n  Container,\n} from \"@material-ui/core\";\nimport { boolean } from \"yup\";\n\ninterface accountInformation {\n  email: string;\n  userName: string;\n  password: string;\n  confirmPassword: string;\n  terms: boolean;\n}\n\nconst initialValues: accountInformation = {\n  email: \"\",\n  userName: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  terms: false,\n};\n\ninterface Props {\n  submit: React.Dispatch<React.SetStateAction<number>>;\n  setFormValues: React.Dispatch<React.SetStateAction<{}>>;\n  prevValues: any;\n}\n\nconst validationSchema = Yup.object().shape({\n  userEmail: Yup.string().email().required(\"Required\"),\n  userName: Yup.string().required(\"Required\"),\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"minimum length of password is 8\"),\n  // this code is used for for checking the previous password is equal to newst password\n  confirmPassword: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\")], \"Passwored is not matching\"),\n  terms: boolean().oneOf([true]),\n});\n\nconst AccountInformation: FC<Props> = ({\n  submit,\n  setFormValues,\n  prevValues,\n}) => {\n  return (\n    <div className=\"div\">\n      <Formik\n        initialValues={prevValues}\n        onSubmit={(values: accountInformation) => {\n          console.log(values);\n          submit(2);\n          setFormValues({ ...values, ...prevValues });\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isValid }) => {\n          return (\n            <Form>\n              <div>\n                <Container maxWidth=\"sm\">\n                  <Grid container spacing={3} justify=\"center\" className=\"data\">\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        as={TextField}\n                        name=\"userEmail\"\n                        type=\"email\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"userEmail\" />}\n                        label=\"Email\"\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        as={TextField}\n                        name=\"userName\"\n                        type=\"text\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"userName\" />}\n                        label=\"UserName\"\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        as={TextField}\n                        name=\"password\"\n                        variant=\"outlined\"\n                        helperText={\n                          <ErrorMessage name=\"password\" className=\"requier\" />\n                        }\n                        label=\"Password\"\n                        fullWidth\n                        type=\"password\"\n                      />\n                    </Grid>\n\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        as={TextField}\n                        name=\"confirmPassword\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"confirmPassword\" />}\n                        label=\"ConfirmPassword\"\n                        fullWidth\n                        type=\"password\"\n                      />\n                    </Grid>\n\n                    <Grid item sm={12} md={12} lg={12}>\n                      <div className=\"checkbox\">\n                        <MyCheckbox\n                          // style={{ textAlign: \"left\" }}\n                          name=\"terms\"\n                        />\n                        <b>Accept Terms and Condition</b>\n                      </div>\n                    </Grid>\n\n                    <Grid item sm={6} md={6} lg={6} className=\"buttons\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => submit(0)}\n                      >\n                        Back\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        disabled={!(dirty && isValid)}\n                        color=\"primary\"\n                        type=\"submit\"\n                      >\n                        Next\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Container>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport interface MyCheckboxProps extends CheckboxProps {\n  name: string;\n  value?: string | number;\n  label?: string;\n}\n\nexport function MyCheckbox(props: MyCheckboxProps) {\n  const [field] = useField({\n    name: props.name,\n    type: \"checkbox\",\n    value: props.value,\n  });\n\n  return (\n    <FormControlLabel\n      control={<Checkbox {...props} {...field} />}\n      label={props.label}\n    />\n  );\n}\n\nexport default AccountInformation;\n","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Personal.tsx",["32"],"import React, { FC } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  Container,\n} from \"@material-ui/core\";\n\ninterface personalInfo {\n  firstName: string;\n  lastName: string;\n\n  phoneNumber: number;\n  age: number;\n}\n\nconst initialValues: personalInfo = {\n  firstName: \"\",\n  lastName: \"\",\n\n  phoneNumber: 0,\n  age: 0,\n};\n\ninterface Props {\n  submit: React.Dispatch<React.SetStateAction<number>>;\n  setFormValues: React.Dispatch<React.SetStateAction<{}>>;\n  prevValues: any;\n}\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string().required(\"Required\"),\n  lastName: Yup.string().required(\"Required\"),\n  phoneNumber: Yup.number().required(\"Required\"),\n  age: Yup.number()\n    .required(\"Required\")\n    .min(18, \"age should be greater than 18\"),\n});\n\nconst PersonalInformation: FC<Props> = ({\n  submit,\n  setFormValues,\n  prevValues,\n}) => {\n  return (\n    <div>\n      <Formik\n        initialValues={prevValues}\n        onSubmit={(values: personalInfo) => {\n          console.log(values);\n          setFormValues({ ...values });\n          submit(1);\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isValid }) => {\n          return (\n            <Form>\n              <div>\n                <Typography className=\"heading\" variant=\"h4\">\n                  Personal Informatoin\n                </Typography>\n\n                <Container maxWidth=\"sm\">\n                  <Grid container spacing={3} justify=\"center\" className=\"data\">\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        name=\"firstName\"\n                        as={TextField}\n                        label=\"FirstName\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"firstName\" />}\n                        fullWidth\n                      />\n                    </Grid>\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        name=\"lastName\"\n                        as={TextField}\n                        label=\"lastName\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"lastName\" />}\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        name=\"phoneNumber\"\n                        as={TextField}\n                        label=\"phoneNumber\"\n                        type=\"number\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"phoneNumber\" />}\n                        fullWidth\n                      />\n                    </Grid>\n                    <Grid item sm={12} md={12} lg={12}>\n                      <Field\n                        name=\"age\"\n                        as={TextField}\n                        label=\"age\"\n                        type=\"number\"\n                        variant=\"outlined\"\n                        helperText={<ErrorMessage name=\"age\" />}\n                        fullWidth\n                      />\n                    </Grid>\n\n                    <Button\n                      variant=\"contained\"\n                      disabled={!(dirty && isValid)}\n                      color=\"primary\"\n                      type=\"submit\"\n                    >\n                      Next\n                    </Button>\n                  </Grid>\n                </Container>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default PersonalInformation;\n","C:\\Users\\Muhammad Talha\\Desktop\\React-Form\\src\\components\\Review.tsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":23,"column":7,"nodeType":"39","messageId":"40","endLine":23,"endColumn":40},{"ruleId":"37","severity":1,"message":"38","line":20,"column":7,"nodeType":"39","messageId":"40","endLine":20,"endColumn":34},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'initialValues' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]